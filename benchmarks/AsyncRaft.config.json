{
    "preds"  :  [
        "(currentTerm[VARI] > currentTerm[VARJ])",
        "(currentTerm[VARJ] > currentTerm[VARI])",
        "(currentTerm[VARI] >= currentTerm[VARJ])",
        "(currentTerm[VARJ] >= currentTerm[VARI])",
        "(currentTerm[VARI] <= currentTerm[VARJ])",
        "(currentTerm[VARJ] <= currentTerm[VARI])",
        "(currentTerm[VARI] = currentTerm[VARJ])",
        "(state[VARI] = Leader)",
        "(state[VARI] = Follower)",
        "(state[VARI] = Candidate)",
        "(state[VARJ] = Leader)",
        "(state[VARJ] = Follower)",
        "(state[VARJ] = Candidate)",
        "(state[VARI] = Leader /\\ VARI # VARJ)",
        "(state[VARI] = Candidate /\\ VARI # VARJ)",
        "(state[VARI] \\in {Leader,Candidate})",
        "(state[VARI] \\in {Follower,Candidate})",
        "(state[VARI] \\in {Leader,Candidate} /\\ VARJ \\in votesGranted[VARI])",
        "(state[VARI] \\in {Leader,Candidate} /\\ VARI # VARJ)",
        "VARREQVRES.mterm = currentTerm[VARI] /\\ VARREQVRES.msource = VARJ /\\ VARREQVRES.mdest # VARI /\\ VARREQVRES.mvoteGranted",
        "(state[VARI] \\in {Follower,Candidate} /\\ VARI # VARJ)",
        "(state[VARI] = Leader /\\ VARI # VARJ /\\ currentTerm[VARI] = currentTerm[VARJ])",
        "(state[VARI] = Candidate /\\ VARI # VARJ)",
        "(state[VARI] = Candidate /\\ VARI # VARJ /\\ currentTerm[VARI] = currentTerm[VARJ])",
        "(state[VARI] = Follower /\\ VARI # VARJ)",
        "(state[VARJ] \\in {Leader,Candidate} /\\ VARI # VARJ)",
        "votesGranted[VARI] \\in Quorum",
        "votesGranted[VARJ] \\in Quorum",
        "VARI \\in votesGranted[VARI]",
        "VARJ \\in votesGranted[VARI]",
        "VARI \\in votesGranted[VARJ]",
        "votesGranted[VARI] \\cap votesGranted[VARJ] = {}",
        "VARREQVRES.mterm = currentTerm[VARI]",
        "VARREQVRES.mterm = currentTerm[VARJ]",
        "VARREQVRES.msource = VARI",
        "VARREQVRES.msource = VARJ",
        "VARREQVRES.mdest = VARI",
        "VARREQVRES.mdest = VARJ",
        "VARREQVRES.mvoteGranted",
        "VARREQVRES.mterm = currentTerm[VARREQVRES.mdest]",
        "VARREQVRES.mterm = currentTerm[VARREQVRES.msource]",
        "currentTerm[VARREQVRES.msource] >= VARREQVRES.mterm",
        "currentTerm[VARREQVRES.mdest] >= VARREQVRES.mterm",
        "VARREQVRES.msource \\in votesGranted[VARREQVRES.mdest]",
        "VARI \\in votesGranted[VARREQVRES.mdest]",
        "VARI \\in votesGranted[VARREQVRES.msource]",
        "VARJ \\in votesGranted[VARREQVRES.mdest]",
        "votedFor[VARI] = VARI",
        "votedFor[VARJ] = VARJ",
        "votedFor[VARI] = VARJ",
        "votedFor[VARJ] = VARI",
        "votedFor[VARREQVRES.msource] = VARREQVRES.mdest",
        "(commitIndex[VARI] > 0)",
        "CanAppend(VARM, VARI) /\\ log = log",
        "Len(log[VARI]) = VARM.mprevLogIndex",
        "LogOk(VARI, VARM) /\\ log = log",
        "log = [log EXCEPT ![VARI] = Append(log[VARI], currentTerm[VARI])]",
        "log = [log EXCEPT ![VARJ] = Append(log[VARJ], currentTerm[VARJ])]",
        "VARI \\in VARQ",
        "VARJ \\in VARQ",
        "VARREQVM.mterm = currentTerm[VARI]",
        "VARREQVM.msource = VARI",
        "VARREQVM.msource = VARJ",
        "\\E INDK \\in DOMAIN log[VARJ] : log[VARJ][INDK] = currentTerm[VARI]",
        "\\E INDK \\in DOMAIN log[VARJ] : ~\\E INDI \\in DOMAIN log[VARI] : (INDI = INDK /\\ log[VARI][INDK] = log[VARJ][INDK])",
        "currentTerm[VARREQVM.msource] = VARREQVM.mterm",
        "currentTerm[VARREQVM.msource] >= VARREQVM.mterm",
        "state[VARREQVM.msource] = Leader",
        "state[VARREQVM.msource] = Candidate",
        "state[VARREQVM.mdest] = Candidate",
        "state[VARREQVM.mdest] = Candidate",
        "votedFor[VARREQVM.msource] = VARREQVM.msource",
        "votedFor[VARREQVM.msource] = VARREQVM.mdest",
        "commitIndex[VARI] > VARM.mcommitIndex",
        "VARM.mcommitIndex > 0",
        "VARM.mprevLogIndex = nextIndex[VARI][VARJ]",
        "VARM.mprevLogTerm = currentTerm[VARI]",
        "VARLOGINDI = VARM.mprevLogIndex + 1",
        "VARM.mentries = <<>>",
        "VARM.mentries # <<>> /\\ VARLOGINDI \\in DOMAIN log[VARI] /\\ log[VARI][VARLOGINDI] = VARM.mentries[1]",
        "VARLOGINDI \\in DOMAIN log[VARI] /\\ log[VARI][VARLOGINDI] = currentTerm[VARI]",
        "VARLOGINDI \\in DOMAIN log[VARI] /\\ log[VARI][VARLOGINDI] = currentTerm[VARJ]",
        "Len(log[VARI]) >= commitIndex[VARI]",
        "Len(log[VARI]) >= commitIndex[VARJ]",
        "Len(log[VARJ]) >= commitIndex[VARJ]",
        "Len(log[VARI]) >= commitIndex[VARI] /\\ Len(log[VARJ]) >= commitIndex[VARI] /\\ commitIndex[VARI] > 0 /\\ log[VARI][commitIndex[VARI]] = log[VARJ][commitIndex[VARI]]",
        "VARLOGINDI \\in DOMAIN log[VARI]",
        "VARLOGINDI \\in DOMAIN log[VARJ]",
        "VARLOGINDI \\in DOMAIN log[VARI] /\\ VARLOGINDI \\in DOMAIN log[VARJ] /\\ log[VARI][VARLOGINDI] = log[VARJ][VARLOGINDI]",
        "VARLOGINDI \\in DOMAIN log[VARI] /\\ Agree(VARI, VARLOGINDI) \\in Quorum /\\ matchIndex = matchIndex",
        "VARLOGINDI \\in DOMAIN log[VARI] /\\ Agree(VARI, VARLOGINDI) = {} /\\ matchIndex = matchIndex",
        "AgreeIndexes(VARI) = {} /\\ matchIndex = matchIndex",
        "AgreeIndexes(VARI) # {} /\\ log[VARI][Max(AgreeIndexes(VARI))] = currentTerm[VARI] /\\ matchIndex = matchIndex",
        "AgreeIndexes(VARI) # {} /\\ commitIndex[VARI] > Max(AgreeIndexes(VARI)) /\\ matchIndex = matchIndex",
        "AgreeIndexes(VARI) # {} /\\ commitIndex[VARI] = Max(AgreeIndexes(VARI)) /\\ matchIndex = matchIndex",
        "Len(log[VARI]) >= matchIndex[VARI][VARJ]",
        "Len(log[VARI]) > matchIndex[VARI][VARJ]",
        "H_CommitIndexCoveredOnQuorum /\\ commitIndex = commitIndex /\\ log = log",
        "IsPrefix(log[VARI], log[VARJ])",
        "IsPrefix(log[VARJ], log[VARI])",
        "commitIndex[VARI] \\in DOMAIN log[VARI] /\\ commitIndex[VARI] \\in DOMAIN log[VARJ] /\\ log[VARJ][commitIndex[VARI]] = log[VARI][commitIndex[VARI]]",
        "Len(log[VARMAERES.msource]) >= VARMAERES.mmatchIndex",
        "Len(log[VARMAERES.mdest]) >= VARMAERES.mmatchIndex",
        "log[VARMAERES.msource][VARMAERES.mmatchIndex] = log[VARMAERES.mdest][VARMAERES.mmatchIndex]",
        "VARMAERES.mterm = currentTerm[VARMAERES.mdest]",
        "VARMAERES.mterm = currentTerm[VARMAERES.msource]",
        "VARMAERES.mterm > currentTerm[VARMAERES.msource]",
        "VARMAERES.mterm = currentTerm[VARI]",
        "matchIndex[VARI][VARJ] = VARMAERES.mmatchIndex",
        "VARMAERES.msuccess"
    ],
    "preds_alt" : [],
    "safety"  :  "H_LogMatching",
    "constants"  : {
        "n1" : "n1",
        "n2" : "n2",
        "n3" : "n3",
        "n4" : "n4",
        "n5" : "n5",
        "Server" : [ "{n1,n2}", "{n1,n2,n3,n4,n5}"],
        "Follower" : "Follower",
        "Candidate" : "Candidate",
        "Leader" : "Leader",
        "Nil" : "Nil",
        "RequestVoteRequest" : "RequestVoteRequest",
        "RequestVoteResponse" : "RequestVoteResponse",
        "AppendEntriesRequest" : "AppendEntriesRequest",
        "AppendEntriesResponse" : "AppendEntriesResponse",
        "MaxTerm" : ["2"],
        "MaxLogLen" : ["1", "1"],
        "MaxNumVoteMsgs": ["0"]
    },
    "constraint"  :  "StateConstraint",
    "quant_inv": "\\A VARI \\in Server : \\A VARJ \\in Server : \\E VARQ \\in Quorum : \\A VARM \\in appendEntriesRequestMsgs : \\A VARMAERES \\in appendEntriesResponseMsgs : \\A VARREQVM \\in requestVoteRequestMsgs : \\A VARREQVRES \\in requestVoteResponseMsgs : \\A VARLOGINDI \\in LogIndices : ",
    "quant_vars": ["VARI", "VARJ", "VARIND", "VARM", "VARLOGINDI"],
    "model_consts"  :  "CONSTANT n1,n2,n3,n4,n5",
    "max_tlc_inv_depth": 17,
    "simulation_inv_check": true,
    "simulation_inv_check_num_states": 12000000,
    "simulation_inv_check_depth": 45,
    "symmetry" : true,
    "typeok"  :  "TypeOKRandom",
    "tlc_specific_spec": true,
    "try_final_minimize": false,
    "simulate"  :  true,
    "actions": [
        "RequestVoteAction",
        "BecomeLeaderAction",
        "ClientRequestAction",
        "AdvanceCommitIndexAction",
        "AppendEntriesAction",
        "UpdateTermRVReqAction",
        "UpdateTermRVResAction",
        "UpdateTermAEReqAction",
        "UpdateTermAEResAction",
        "HandleRequestVoteRequestAction",
        "HandleRequestVoteResponseAction",
        "RejectAppendEntriesRequestAction",
        "AcceptAppendEntriesRequestAppendAction",
        "AcceptAppendEntriesRequestLearnCommitAction",
        "HandleAppendEntriesResponseAction"
    ],
    "tlaps_proof_config": {
        "assumes": [
            "IsFiniteSet(Server)",
            "Nil \\notin Server",
            "(Leader # Follower) /\\ (Leader # Candidate)",
            "(Follower # Candidate)",
            "Server = Server",
            "Quorum \\subseteq Server",
            "MaxLogLen \\in Nat",
            "MaxTerm \\in Nat"
        ],
        "lemma_def_expands": {
            "Safety": ["H_OnePrimaryPerTerm"],
            "H_RequestVoteQuorumInTermImpliesNoOtherLogsInTerm": ["ExistsRequestVoteResponseQuorum"]
        },
        "action_def_expands":{
            "HandleRequestVoteRequestAction": ["LastTerm","RequestVoteRequestType","RequestVoteResponseType","Terms","LogIndicesWithZero"],
            "HandleRequestVoteResponseAction": ["LastTerm","RequestVoteRequestType","RequestVoteResponseType","Terms","LogIndicesWithZero"],
            "RequestVoteAction": ["RequestVoteRequestType","RequestVoteResponseType","Terms","LogIndicesWithZero", "AppendEntriesRequestType","AppendEntriesResponseType"],
            "UpdateTermAction": ["RequestVoteRequestType","RequestVoteResponseType","Terms","LogIndicesWithZero", "AppendEntriesRequestType","AppendEntriesResponseType"]
        }
    }
}