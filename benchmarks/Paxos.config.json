{
    "preds"  :  [
        "maxBal[ACCI] = -1",
        "maxVBal[ACCI] = -1",
        "maxBal[ACCI] < BALI",
        "maxBal[ACCI] = BALI",
        "maxBal[ACCI] < BALJ",
        "maxBal[ACCI] = BALJ",
        "maxBal[ACCI] < BALK",
        "maxBal[ACCI] = BALK",
        "maxBal[ACCI] < maxVBal[ACCI]",
        "maxVBal[ACCI] > BALI",
        "maxVBal[ACCI] = BALI",
        "maxVBal[ACCI] > BALJ",
        "maxVBal[ACCI] = BALJ",
        "maxVal[ACCI] = VALI",
        "ChosenAt(BALI, VALI) /\\ msgs2b = msgs2b",
        "ChosenAt(BALI, VALJ) /\\ msgs2b = msgs2b",
        "ChosenAt(BALJ, VALI) /\\ msgs2b = msgs2b",
        "ChosenAt(BALJ, VALJ) /\\ msgs2b = msgs2b",
        "ChosenAt(BALK, VALI) /\\ msgs2b = msgs2b",
        "ChosenAt(BALK, VALJ) /\\ msgs2b = msgs2b",
        "ChosenAt(maxBal[ACCI], VALI) /\\ msgs2b = msgs2b",
        "ChosenAt(maxVBal[ACCI], VALI) /\\ msgs2b = msgs2b",
        "msg1a(ACCI,BALI) /\\ msgs1a = msgs1a",
        "msg1a(ACCI,BALJ) /\\ msgs1a = msgs1a",
        "msg1a(ACCI,BALK) /\\ msgs1a = msgs1a",
        "msg1b(ACCI,BALI,BALJ,VALI) /\\ msgs1b = msgs1b",
        "msg1b(ACCI,BALI,BALJ,VALJ) /\\ msgs1b = msgs1b",
        "msg1b(ACCI,BALJ,BALK,VALI) /\\ msgs1b = msgs1b",
        "msg1b(ACCI,BALJ,BALK,VALJ) /\\ msgs1b = msgs1b",
        "msg2a(BALI,VALI) /\\ msgs2a = msgs2a",
        "msg2a(BALJ,VALI) /\\ msgs2a = msgs2a",
        "msg2a(BALK,VALI) /\\ msgs2a = msgs2a",
        "msg2a(BALI,VALJ) /\\ msgs2a = msgs2a",
        "msg2a(BALJ,VALJ) /\\ msgs2a = msgs2a",
        "msg2a(BALK,VALJ) /\\ msgs2a = msgs2a",
        "msg2b(ACCI,BALI,VALI) /\\ msgs2b = msgs2b",
        "msg2b(ACCI,BALJ,VALI) /\\ msgs2b = msgs2b",
        "msg2b(ACCI,BALK,VALI) /\\ msgs2b = msgs2b",
        "msg2b(ACCI,BALI,VALJ) /\\ msgs2b = msgs2b",
        "msg2b(ACCI,BALJ,VALJ) /\\ msgs2b = msgs2b",
        "msg2b(ACCI,BALK,VALJ) /\\ msgs2b = msgs2b",
        "\\E m \\in msgs1a : m.bal >= maxBal[ACCI]",
        "\\E m \\in msgs1b : m.bal >= maxBal[ACCI]",
        "\\E m \\in msgs2a : m.bal >= maxBal[ACCI]",
        "\\E m \\in msgs2b : m.bal >= maxBal[ACCI]",
        "\\E Q \\in Quorum : ShowsSafeAt(Q, maxBal[ACCI], VALI)",
        "VotedFor(ACCI,BALI,VALI)/\\ msgs2b = msgs2b",
        "VotedFor(ACCI,BALI,VALJ)/\\ msgs2b = msgs2b",
        "VotedFor(ACCI,BALJ,VALI)/\\ msgs2b = msgs2b",
        "VotedFor(ACCI,BALJ,VALJ)/\\ msgs2b = msgs2b",
        "VotedFor(ACCI,BALK,VALI)/\\ msgs2b = msgs2b",
        "VotedFor(ACCI,BALK,VALJ)/\\ msgs2b = msgs2b",
        "VALI=VALJ /\\ maxBal = maxBal",
        "VALI=VALJ /\\ msgs2b = msgs2b",
        "VALI=VALJ /\\ msgs2a = msgs2a",
        "SafeAt(BALI, VALI) /\\ maxBal = maxBal /\\ msgs2b = msgs2b",
        "SafeAt(BALI, VALJ) /\\ maxBal = maxBal /\\ msgs2b = msgs2b",
        "SafeAt(BALJ, VALI) /\\ maxBal = maxBal /\\ msgs2b = msgs2b",
        "SafeAt(BALJ, VALJ) /\\ maxBal = maxBal /\\ msgs2b = msgs2b",
        "SafeAt(BALK, VALI) /\\ maxBal = maxBal /\\ msgs2b = msgs2b",
        "SafeAt(BALK, VALJ) /\\ maxBal = maxBal /\\ msgs2b = msgs2b",
        "BALI = -1 /\\ maxBal = maxBal",
        "BALJ = -1 /\\ maxBal = maxBal",
        "BALK = -1 /\\ maxBal = maxBal",
        "VALI = None /\\ maxBal = maxBal",
        "VALJ = None /\\ maxBal = maxBal",
        "VALI \\in chosen",
        "VALJ \\in chosen",
        "chosen = {}"
    ],
    "preds_alt" : [],
    "safety"  :  "Inv",
    "cti_gen_instance_indexes": [0,1],
    "main_inv_check_index": 1,
    "constants"  :  {
        "Acceptor": ["{a1,a2,a3}"],
        "Ballot": ["{0,1,2}", "{0,1,2,3}"],
        "None": "None",
        "Value": ["{v1,v2}"],
        "v1": "v1",
        "v2": "v2",
        "a1": "a1",
        "a2": "a2",
        "a3": "a3"
    },
    "constraint"  :  "",
    "quant_inv"  :  "\\A ACCI \\in Acceptor : \\A VALI \\in Value : \\A VALJ \\in Value : \\A BALI \\in Ballot : \\A BALJ \\in Ballot : \\A BALK \\in Ballot : ",
    "quant_inv_alt"  :  null,
    "quant_vars": ["VALI", "VALJ"],
    "model_consts"  :  "CONSTANT a1,a2,a3,v1,v2",
    "symmetry" : true,
    "typeok"  :  "TypeOKRandom",
    "simulate"  :  true,
    "tlc_specific_spec": true,
    "tlaps_proof_config": {
    "assumes": [
    ],
    "global_def_expands":[
    ],
    "lemma_def_expands": {
        "Safety": ["Inv"]
    },
    "action_def_expands":{
    }
}
}