{
    "preds"  :  [
        "num[VARI] > num[VARJ]",
        "num[VARI] = num[VARJ]",
        "num[VARI] = 0",
        "num[VARI] = 1",
        "\\E NK \\in Nats : num[VARI] = NK",
        "flag[VARI]",
        "flag[VARJ]",
        "flag[nxt[VARI]]",
        "flag[nxt[VARJ]]",
        "pc[VARI] = \"ncs\"",
        "pc[VARI] = \"exit\"",
        "pc[VARI] = \"e1\"",
        "pc[VARI] = \"e2\"",
        "pc[VARI] = \"e3\"",
        "pc[VARI] = \"e4\"",
        "pc[VARI] = \"cs\"",
        "pc[VARI] = \"w1\"",
        "pc[VARI] \\in {\"w1\",\"w2\"}",
        "pc[VARI] = \"w2\"",
        "pc[VARJ] = \"ncs\"",
        "pc[VARJ] = \"exit\"",
        "pc[VARJ] = \"e1\"",
        "pc[VARJ] = \"e2\"",
        "pc[VARJ] = \"e3\"",
        "pc[VARJ] = \"e4\"",
        "pc[VARJ] = \"cs\"",
        "pc[VARJ] = \"w1\"",
        "pc[VARJ] \\in {\"w1\",\"w2\"}",
        "pc[VARJ] = \"w2\"",
        "(pc[nxt[VARI]] = \"w2\")",
        "unchecked[VARI] = Procs",
        "unchecked[VARI] = Procs \\ {VARI}",
        "unchecked[VARJ] = Procs \\ {VARJ}",
        "VARI \\in unchecked[VARI]",
        "VARI \\in unchecked[VARJ]",
        "VARJ \\in unchecked[VARI]",
        "VARJ \\in unchecked[VARJ]",
        "VARI \\in (Procs \\ unchecked[VARI])",
        "VARJ \\in (Procs \\ unchecked[VARI])",
        "VARJ \\in (Procs \\ unchecked[VARI]) \\ {VARI}",
        "VARI \\in (Procs \\ unchecked[VARJ])",
        "unchecked[VARI] = 1..(VARI-1)",
        "unchecked[VARJ] = 1..(VARI-1)",
        "\\E UI \\in unchecked[VARI] : nxt[VARI] = UI",
        "\\E UI \\in unchecked[VARJ] : nxt[VARJ] = UI",
        "nxt[VARI] = VARJ",
        "nxt[VARI] = VARI",
        "nxt[VARI] < nxt[VARJ]",
        "previous[VARI] = -1",
        "previous[VARJ] = -1",
        "previous[VARI] = VARJ",
        "previous[VARI] = previous[VARJ]",
        "previous[VARI] < previous[VARJ]",
        "previous[VARI] = num[nxt[VARI]]",
        "previous[VARJ] = num[nxt[VARJ]]",
        "max[VARI] = 0",
        "max[VARI] = max[VARJ]",
        "max[VARI] = num[VARI]",
        "max[VARI] = num[VARJ]",
        "max[VARI] < max[VARJ]",
        "num[nxt[VARI]] = 0",
        "num[nxt[VARJ]] = 0",
        "<<num[VARI], VARI>> \\prec <<num[nxt[VARI]], nxt[VARI]>>",
        "<<num[VARI], VARI>> \\prec <<num[nxt[VARJ]], nxt[VARJ]>>",
        "<<num[VARI],VARI>> \\prec <<num[VARJ],VARJ>>",
        "Before(VARI,VARJ) /\\ pc = pc /\\ unchecked = unchecked /\\ max /\\ num = num",
        "Before(VARJ,VARI) /\\ pc = pc /\\ unchecked = unchecked /\\ max /\\ num = num",
        "nxt[VARI] \\in unchecked[VARI]",
        "nxt[VARJ] \\in unchecked[VARJ]",
        "w2Cond(VARI) /\\ num = num /\\ nxt = nxt /\\ previous = previous",
        "w2Cond(VARJ) /\\ num = num /\\ nxt = nxt /\\ previous = previous",
        "LInv1 /\\ pc = pc /\\ num = num",
        "LInv2 /\\ pc = pc /\\ num = num",
        "LInv3 /\\ pc = pc /\\ num = num",
        "LInv4 /\\ pc = pc /\\ num = num",
        "LInv5 /\\ pc = pc /\\ flag = flag",
        "LInv6 /\\ pc = pc /\\ nxt = nxt",
        "LInv7 /\\ pc = pc /\\ unchecked = unchecked",
        "LInv8 /\\ pc = pc /\\ unchecked /\\ max = max /\\ num = num",
        "LInv9 /\\ pc = pc /\\ nxt = nxt /\\ unchecked = unchecked /\\ max = max /\\ num = num",
        "LInv13 /\\ pc = pc /\\ unchecked = unchecked /\\ max = max /\\ num = num",
        "LInv15 /\\ pc = pc /\\ unchecked = unchecked /\\ max = max /\\ num = num /\\ previous = previous"
    ],
    "preds_alt" : [],
    "safety"  :  "H_MutualExclusion",
    "constants"  : {
        "N": ["1", "2", "3"],
        "Nats": ["{0,1,2,3}"]
    },
    "actions": [
        "ncsAction",
        "e1Action",
        "e2Action",
        "e3Action",
        "e4Action",
        "w1Action",
        "w2Action",
        "csAction",
        "exitAction"
    ],
    "simulation_inv_check": false,
    "simulation_inv_check_num_states": 3000000,
    "simulation_inv_check_depth": 60,
    "constraint"  :  "StateConstraint",
    "quant_inv"  :  "\\A VARI \\in Procs : \\A VARJ \\in Procs : ",
    "quant_inv_alt"  :  null,
    "quant_vars": ["VARI", "VARJ"],
    "model_consts"  :  "",
    "symmetry" : false,
    "typeok"  :  "TypeOK",
    "tlc_specific_spec": false,
    "try_final_minimize": false,
    "simulate"  :  true,
    "tlaps_proof_config": {
        "assumes": [
        ],
        "lemma_def_expands": {
            "Safety": ["H_MutualExclusion"]
        },
        "action_def_expands":{
        }
    }
}